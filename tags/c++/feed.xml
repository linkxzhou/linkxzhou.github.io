<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on linkxzhou的博客</title>
    <link>https://linkxzhou.github.io:443/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on linkxzhou的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 10 Sep 2017 20:20:42 +0800</lastBuildDate>
    
	<atom:link href="https://linkxzhou.github.io:443/tags/c++/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>stl智能指针与容器结合使用会发生什么</title>
      <link>https://linkxzhou.github.io:443/post/stl%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%BB%93%E5%90%88%E4%BD%BF%E7%94%A8%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88/</link>
      <pubDate>Sun, 10 Sep 2017 20:20:42 +0800</pubDate>
      
      <guid>https://linkxzhou.github.io:443/post/stl%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%BB%93%E5%90%88%E4%BD%BF%E7%94%A8%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88/</guid>
      <description>智能指针简介 由于C++语言没有自动内存回收机制，程序员每次new出来的内存都要手动delete，为了有效缓解忘记内存delete，因此c++</description>
    </item>
    
    <item>
      <title>tailq详解</title>
      <link>https://linkxzhou.github.io:443/post/tailq%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Thu, 10 Aug 2017 02:20:42 +0800</pubDate>
      
      <guid>https://linkxzhou.github.io:443/post/tailq%E8%AF%A6%E8%A7%A3/</guid>
      <description>tailq介绍 TAILQ是linux内核对双向队列操作的一种抽象，能实现操作队列需要的各种操作：插入元素，删除元素，遍历队列等，其封装是对应</description>
    </item>
    
    <item>
      <title>state-thread使用文档</title>
      <link>https://linkxzhou.github.io:443/post/state-thread%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3/</link>
      <pubDate>Wed, 02 Aug 2017 18:20:42 +0800</pubDate>
      
      <guid>https://linkxzhou.github.io:443/post/state-thread%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3/</guid>
      <description>修改state-thread库 最近在使用协程的开发php扩展，对比了一些协程库，发现state-thread是一个不错的协程开发框架，于是将</description>
    </item>
    
    <item>
      <title>gstack和gcore的使用</title>
      <link>https://linkxzhou.github.io:443/post/gstack%E5%92%8Cgcore%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 01 Aug 2017 20:20:42 +0800</pubDate>
      
      <guid>https://linkxzhou.github.io:443/post/gstack%E5%92%8Cgcore%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>[导读]如何在不中断现网的情况下，调试现网程序；如何在没有源码的情况下，用一种方式查看该程序的运行栈&amp;hellip;本文主要使用gstack</description>
    </item>
    
    <item>
      <title>protothreads协程库详解</title>
      <link>https://linkxzhou.github.io:443/post/protothreads%E5%8D%8F%E7%A8%8B%E5%BA%93%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sat, 01 Jul 2017 18:20:42 +0800</pubDate>
      
      <guid>https://linkxzhou.github.io:443/post/protothreads%E5%8D%8F%E7%A8%8B%E5%BA%93%E8%AF%A6%E8%A7%A3/</guid>
      <description>协程 实际上协程的概念比线程还要早，按照Knuth的说法&amp;rdquo;子例程是协程的特例&amp;rdquo;，一个子例程就是一次子函数调用，那么实际</description>
    </item>
    
    <item>
      <title>state - 状态模式</title>
      <link>https://linkxzhou.github.io:443/post/c&#43;&#43;%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8Bstate/</link>
      <pubDate>Mon, 12 Jun 2017 20:20:42 +0800</pubDate>
      
      <guid>https://linkxzhou.github.io:443/post/c&#43;&#43;%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8Bstate/</guid>
      <description>原理 在&amp;lt;设计模式：可复用对象软件基础&amp;gt;一书中这样描述TCPConnection的状态变化如何使用状态模式： 1.一个TCPConn</description>
    </item>
    
  </channel>
</rss>